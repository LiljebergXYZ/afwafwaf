(function() {
    function g(q) {
        var k = "";
        var m = -1;
        for (var n = 0; n < q.length; n++) {
            var o = q.charCodeAt(n);
            var p = new d(8, f(o & 255, ++m % 8));
            p = p.reverse();
            for (var l = 0; l < p.getLength(); l += 2) {
                if (p.getAt(l) && p.getAt(l + 1)) {
                    k += "a"
                } else {
                    if (p.getAt(l) && !p.getAt(l + 1)) {
                        k += "w"
                    } else {
                        if (!p.getAt(l) && p.getAt(l + 1)) {
                            k += "f"
                        } else {
                            if (!p.getAt(l) && !p.getAt(l + 1)) {
                                k += "g"
                            }
                        }
                    }
                }
            }
        }
        return k
    }

    function a(o) {
        var k = "";
        for (var m = 0; m < o.length; m += 4) {
            var n = new d(8);
            for (var l = 0; l < 4; l++) {
                if (l + m > o.length - 1) {
                    break
                }
                var p = o[m + l];
                if (p != "a") {
                    switch (p) {
                        case "f":
                            n.setAt(l * 2, false);
                            n.setAt(l * 2 + 1, true);
                            break;
                        case "g":
                            n.setAt(l * 2, false);
                            n.setAt(l * 2 + 1, false);
                            break;
                        default:
                            if (p == "w") {
                                n.setAt(l * 2, true);
                                n.setAt(l * 2 + 1, false)
                            }
                            break
                    }
                } else {
                    n.setAt(l * 2, true);
                    n.setAt(l * 2 + 1, true)
                }
            }
            n = n.reverse();
            k += String.fromCharCode(b(parseInt(n, 2), m / 4 % 8))
        }
        return k
    }

    function f(k, l) {
        var j;
        if ((l & 7) == 0) {
            j = k
        } else {
            j = (k << l | k >> 8 - l) & 255
        }
        return j
    }

    function b(k, l) {
        var j;
        if ((l & 7) == 0) {
            j = k
        } else {
            j = (k >> l | k << 8 - l) & 255
        }
        return j
    }

    function d(k, l) {
        this.m_bits = new Array();
        if (l && l.length) {
            for (var j = 0; j < l.length; j++) {
                this.m_bits.push(l[j] ? d._ON : d._OFF)
            }
        } else {
            if (!isNaN(l)) {
                this.m_bits = d.shred(l).m_bits
            }
        }
        if (k && this.m_bits.length != k) {
            if (this.m_bits.length < k) {
                for (var j = this.m_bits.length; j < k; j++) {
                    this.m_bits.unshift(d._OFF)
                }
            } else {
                for (var j = k; j > this.m_bits.length; j--) {
                    this.m_bits.pop()
                }
            }
        }
    }
    d.prototype.reverse = function() {
        m_bits = this.m_bits.reverse();
        return this
    };
    d.prototype.getLength = function() {
        return this.m_bits.length
    };
    d.prototype.getAt = function(j) {
        if (j < this.m_bits.length) {
            return this.m_bits[j]
        }
        return null
    };
    d.prototype.setAt = function(j, k) {
        if (j < this.m_bits.length) {
            this.m_bits[j] = k ? d._ON : d._OFF
        }
    };
    d.prototype.resize = function(j) {
        var l = new Array();
        for (var k = 0; k < j; k++) {
            if (k < this.m_bits.length) {
                l.push(this.m_bits[k])
            } else {
                l.push(d._OFF)
            }
        }
        this.m_bits = l
    };
    d.prototype.getCompliment = function() {
        var j = new d(this.m_bits.length);
        for (var k = 0; k < this.m_bits.length; k++) {
            j.setAt(k, this.m_bits[k] ? d._OFF : d._ON)
        }
        return j
    };
    d.prototype.toString = function() {
        var k = new String();
        for (var j = 0; j < this.m_bits.length; j++) {
            k = k.concat(this.m_bits[j] === d._ON ? "1" : "0")
        }
        return k
    };
    d.prototype.toNumber = function() {
        var k = 0;
        var l = 0;
        for (var j = this.m_bits.length - 1; j >= 0; j--) {
            if (this.m_bits[j] === d._ON) {
                l += Math.pow(2, k)
            }
            k++
        }
        return l
    };
    d.getUnion = function(n, m) {
        var k = d._getLen(n, m, true);
        var j = new d(k);
        for (var l = 0; l < k; l++) {
            j.setAt(l, d._union(n.getAt(l), m.getAt(l)))
        }
        return j
    };
    d.getIntersection = function(n, m) {
        var k = d._getLen(n, m, true);
        var j = new d(k);
        for (var l = 0; l < k; l++) {
            j.setAt(l, d._intersect(n.getAt(l), m.getAt(l)))
        }
        return j
    };
    d.getDifference = function(n, m) {
        var k = d._getLen(n, m, true);
        var j = new d(k);
        for (var l = 0; l < k; l++) {
            j.setAt(l, d._difference(n.getAt(l), m.getAt(l)))
        }
        return j
    };
    d.shred = function(j) {
        var l = new Array();
        var k = j;
        do {
            l.push(k % 2);
            k = Math.floor(k / 2)
        } while (k > 0);
        return new d(l.length, l.reverse())
    };
    d._ON = 1;
    d._OFF = 0;
    d._intersect = function(k, j) {
        return k === d._ON && j === d._ON ? d._ON : d._OFF
    };
    d._union = function(k, j) {
        return k === d._ON || j === d._ON ? d._ON : d._OFF
    };
    d._difference = function(k, j) {
        return k === d._ON && j !== d._ON ? d._ON : d._OFF
    };
    d._getLen = function(n, m, l) {
        var k = n.getLength();
        var j = m.getLength();
        return k > j ? l ? j : k : l ? j : k
    };
    var i = document.getElementById("decoded");
    var e = document.getElementById("encoded");
    e.value = g(i.value);
    e.onkeyup = function () {
        i.value = a(e.value)
    }
    i.onkeyup = function () {
        e.value = g(i.value)
    }
})();